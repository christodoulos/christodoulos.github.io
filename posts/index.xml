<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Christodoulos Fragkoudakis</title><link>http://fragkoudakis.gr/posts/</link><description>Recent content in Posts on Christodoulos Fragkoudakis</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 01 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://fragkoudakis.gr/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>On Storing Data Models</title><link>http://fragkoudakis.gr/posts/digital-twins/storing-data-models/</link><pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate><guid>http://fragkoudakis.gr/posts/digital-twins/storing-data-models/</guid><description>Without a Realtime Database # Most Digital Twin projects require communication between several endpoints. These endpoints can be anything from devices and services to applications, and eventually, data needs to be stored somewhere for further processing and analysis.
So let’s say you want to build a Digital Twin where a device will measure temperature and humidity values from sensors and send them to a database service to store them. Then you want to have a web application that will fetch these values and display them in a dashboard.</description></item><item><title>The big picture</title><link>http://fragkoudakis.gr/posts/digital-twins/the-big-picture/</link><pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate><guid>http://fragkoudakis.gr/posts/digital-twins/the-big-picture/</guid><description>A bird’s eye view of a Digital Twin implementation that incorporates modern technological advancements could be depicted in the following figure. Clients are running the Digital Twin’s frontend that displays objects bound to backend entities. The front-end implementation uses “observable” constructs, adjusting displayed objects to “live” back-end queries. The backend implementation involves a sensor cloud that constantly updates a real-time database. The real-time database automatically pushes updates to every connected client.</description></item><item><title>Introduction to mongoengine</title><link>http://fragkoudakis.gr/posts/python/mongoengine-primer/</link><pubDate>Tue, 29 Mar 2022 00:00:00 +0000</pubDate><guid>http://fragkoudakis.gr/posts/python/mongoengine-primer/</guid><description>MongoEngine is an Object-Document Mapper, written in Python for working with MongoDB. To install it, simply run
python -m pip install -U mongoengine dnspython Lets connect to an Atlas database and save a sample User document:
from mongoengine import * connect( db=&amp;#34;myFirstDB&amp;#34;, username=&amp;#34;username&amp;#34;, password=&amp;#34;password&amp;#34;, host=&amp;#34;mongodb+srv://whatever.mongodb.net/db&amp;#34;, alias=&amp;#34;mydb&amp;#34;, ) class User(Document): username = StringField() password = StringField() meta = {&amp;#34;db_alias&amp;#34;: &amp;#34;mydb&amp;#34;, &amp;#34;collection&amp;#34;: &amp;#34;users&amp;#34;} User(username=&amp;#34;username&amp;#34;, password=&amp;#34;password&amp;#34;).save() The above code saves a new document into the user collection of the myFirstDB database:</description></item><item><title>Αλυκές της Νάξου</title><link>http://fragkoudakis.gr/posts/naxos/alukes/</link><pubDate>Mon, 24 Oct 2005 00:00:00 +0000</pubDate><guid>http://fragkoudakis.gr/posts/naxos/alukes/</guid><description>Διήγηση του αείμνηστου πατέρα μου Γιώργου Φραγκουδάκη:
Δίπλα στη δυτική πλευρά του σημερινού αεροδρομίου, το έδαφος ήταν αμμώδες, επίπεδο και το υψόμετρο ήταν ελάχιστο. Το έλουζε η αλμύρα της διπλανής θάλασσας και γι’ αυτό ήταν τελείως ακατάλληλο για γεωργική εκμετάλευση. Εκεί υπήρχαν όλες οι προϋποθέσεις για να δημιουργηθούν και λειτουργήσουν οι αλυκές της Νάξου.
Έμπειροι αγροτοεργάτες από το διπλανό χωριό το Αγερσανί ανοίγουν στν άμμο λεκάνες σε σχήμα ορθογώνιο, αρκετού μήκους και πλάτους, που είχαν βάθος εβδομήντα εκατοστά περίπου.</description></item></channel></rss>