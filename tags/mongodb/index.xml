<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mongodb on Christodoulos Fragkoudakis</title><link>http://fragkoudakis.gr/tags/mongodb/</link><description>Recent content in mongodb on Christodoulos Fragkoudakis</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 01 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://fragkoudakis.gr/tags/mongodb/index.xml" rel="self" type="application/rss+xml"/><item><title>On Storing Data Models</title><link>http://fragkoudakis.gr/posts/digital-twins/storing-data-models/</link><pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate><guid>http://fragkoudakis.gr/posts/digital-twins/storing-data-models/</guid><description>Without a Realtime Database # Most Digital Twin projects require communication between several endpoints. These endpoints can be anything from devices and services to applications, and eventually, data needs to be stored somewhere for further processing and analysis.
So letâ€™s say you want to build a Digital Twin where a device will measure temperature and humidity values from sensors and send them to a database service to store them. Then you want to have a web application that will fetch these values and display them in a dashboard.</description></item><item><title>Introduction to mongoengine</title><link>http://fragkoudakis.gr/posts/python/mongoengine-primer/</link><pubDate>Tue, 29 Mar 2022 00:00:00 +0000</pubDate><guid>http://fragkoudakis.gr/posts/python/mongoengine-primer/</guid><description>MongoEngine is an Object-Document Mapper, written in Python for working with MongoDB. To install it, simply run
python -m pip install -U mongoengine dnspython Lets connect to an Atlas database and save a sample User document:
from mongoengine import * connect( db=&amp;#34;myFirstDB&amp;#34;, username=&amp;#34;username&amp;#34;, password=&amp;#34;password&amp;#34;, host=&amp;#34;mongodb+srv://whatever.mongodb.net/db&amp;#34;, alias=&amp;#34;mydb&amp;#34;, ) class User(Document): username = StringField() password = StringField() meta = {&amp;#34;db_alias&amp;#34;: &amp;#34;mydb&amp;#34;, &amp;#34;collection&amp;#34;: &amp;#34;users&amp;#34;} User(username=&amp;#34;username&amp;#34;, password=&amp;#34;password&amp;#34;).save() The above code saves a new document into the user collection of the myFirstDB database:</description></item></channel></rss>