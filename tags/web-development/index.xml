<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>web development on Christodoulos Fragkoudakis</title><link>http://fragkoudakis.gr/tags/web-development/</link><description>Recent content in web development on Christodoulos Fragkoudakis</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 02 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://fragkoudakis.gr/tags/web-development/index.xml" rel="self" type="application/rss+xml"/><item><title>NestJS</title><link>http://fragkoudakis.gr/posts/nestjs/</link><pubDate>Tue, 02 May 2023 00:00:00 +0000</pubDate><guid>http://fragkoudakis.gr/posts/nestjs/</guid><description>Using validation rules in DTOs # Using class-validator decorators in your DTOs is not strictly necessary, but it&amp;rsquo;s recommended when working with NestJS because it allows you to validate incoming data at the application layer before it reaches your Mongoose schema.
NestJS and Mongoose schema validation serve different purposes:
DTO validation (class-validator): Validates the data coming from the client or other external sources before it reaches your application&amp;rsquo;s business logic. This can help you catch issues early on, before any processing or storage happens.</description></item></channel></rss>